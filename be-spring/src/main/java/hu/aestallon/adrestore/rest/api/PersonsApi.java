/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package hu.aestallon.adrestore.rest.api;

import hu.aestallon.adrestore.rest.model.PersonAddressUpdate;
import hu.aestallon.adrestore.rest.model.PersonDetail;
import hu.aestallon.adrestore.rest.model.PersonNameUpdate;
import hu.aestallon.adrestore.rest.model.PersonPreview;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "persons", description = "the persons API")
public interface PersonsApi {

    default PersonsApiDelegate getDelegate() {
        return new PersonsApiDelegate() {};
    }

    /**
     * POST /persons : Create a new person
     *
     * @param personDetail Person object to be created (required)
     * @return The created person (status code 201)
     */
    @Operation(
        operationId = "createPerson",
        summary = "Create a new person",
        responses = {
            @ApiResponse(responseCode = "201", description = "The created person", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonDetail.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/persons",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PersonDetail> createPerson(
        @Parameter(name = "PersonDetail", description = "Person object to be created", required = true) @Valid @RequestBody PersonDetail personDetail
    ) {
        return getDelegate().createPerson(personDetail);
    }


    /**
     * DELETE /persons/{personId} : Delete a person by ID
     *
     * @param personId ID of person to delete (required)
     * @return The person was successfully deleted (status code 204)
     */
    @Operation(
        operationId = "deletePerson",
        summary = "Delete a person by ID",
        responses = {
            @ApiResponse(responseCode = "204", description = "The person was successfully deleted")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/persons/{personId}"
    )
    default ResponseEntity<Void> deletePerson(
        @Parameter(name = "personId", description = "ID of person to delete", required = true) @PathVariable("personId") Integer personId
    ) {
        return getDelegate().deletePerson(personId);
    }


    /**
     * GET /persons : Retrieve all persons
     *
     * @return A list of persons (status code 200)
     */
    @Operation(
        operationId = "getAllPersons",
        summary = "Retrieve all persons",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of persons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonPreview.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persons",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PersonPreview>> getAllPersons(
        
    ) {
        return getDelegate().getAllPersons();
    }


    /**
     * GET /persons/{personId} : Retrieve a person by ID
     *
     * @param personId ID of person to return (required)
     * @return The requested person (status code 200)
     */
    @Operation(
        operationId = "getPersonById",
        summary = "Retrieve a person by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "The requested person", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonDetail.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/persons/{personId}",
        produces = { "application/json" }
    )
    default ResponseEntity<PersonDetail> getPersonById(
        @Parameter(name = "personId", description = "ID of person to return", required = true) @PathVariable("personId") Integer personId
    ) {
        return getDelegate().getPersonById(personId);
    }


    /**
     * PUT /persons/{personId}/addresses : Update a person&#39;s addresses
     *
     * @param personId ID of the person to update (required)
     * @param personAddressUpdate Updated addresses of the person (required)
     * @return Person addresses updated successfully (status code 200)
     */
    @Operation(
        operationId = "updatePersonAddress",
        summary = "Update a person's addresses",
        responses = {
            @ApiResponse(responseCode = "200", description = "Person addresses updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonDetail.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/persons/{personId}/addresses",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PersonDetail> updatePersonAddress(
        @Parameter(name = "personId", description = "ID of the person to update", required = true) @PathVariable("personId") Integer personId,
        @Parameter(name = "PersonAddressUpdate", description = "Updated addresses of the person", required = true) @Valid @RequestBody PersonAddressUpdate personAddressUpdate
    ) {
        return getDelegate().updatePersonAddress(personId, personAddressUpdate);
    }


    /**
     * PUT /persons/{personId} : Update a person&#39;s name
     *
     * @param personId ID of the person to update (required)
     * @param personNameUpdate Updated name of the person (required)
     * @return Person name updated successfully (status code 200)
     */
    @Operation(
        operationId = "updatePersonName",
        summary = "Update a person's name",
        responses = {
            @ApiResponse(responseCode = "200", description = "Person name updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PersonDetail.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/persons/{personId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PersonDetail> updatePersonName(
        @Parameter(name = "personId", description = "ID of the person to update", required = true) @PathVariable("personId") Integer personId,
        @Parameter(name = "PersonNameUpdate", description = "Updated name of the person", required = true) @Valid @RequestBody PersonNameUpdate personNameUpdate
    ) {
        return getDelegate().updatePersonName(personId, personNameUpdate);
    }

}
